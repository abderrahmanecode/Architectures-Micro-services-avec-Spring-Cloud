{"ast":null,"code":"import _asyncToGenerator from \"D:/Abdo files/TP3_MS/ecom-web-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n  }\n  isAccessAllowed(route, state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Force the user to log in if currently unauthenticated.\n      if (!_this.authenticated) {\n        yield _this.keycloak.login({\n          redirectUri: window.location.origin\n        });\n      }\n      // Get the roles required from the route.\n      const requiredRoles = route.data['roles'];\n      // Allow the user to proceed if no additional roles are required to access the route.\n      if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n        return true;\n      }\n      // Allow the user to proceed if all the required roles are present.\n      return requiredRoles.every(role => _this.roles.includes(role));\n    })();\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAMA,SAASA,iBAAiB,QAAyB,kBAAkB;;;;AAKrE,OAAM,MAAOC,SAAU,SAAQD,iBAAiB;EAC9CE,YAC8BC,MAAc,EACvBC,QAAyB;IAE5C,KAAK,CAACD,MAAM,EAAEC,QAAQ,CAAC;IAHK,WAAM,GAAND,MAAM;IACf,aAAQ,GAARC,QAAQ;EAG7B;EAEaC,eAAe,CAC1BC,KAA6B,EAC7BC,KAA0B;IAAA;IAAA;MAE1B;MACA,IAAI,CAAC,KAAI,CAACC,aAAa,EAAE;QACvB,MAAM,KAAI,CAACJ,QAAQ,CAACK,KAAK,CAAC;UACxBC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC;SAC9B,CAAC;;MAGJ;MACA,MAAMC,aAAa,GAAGR,KAAK,CAACS,IAAI,CAAC,OAAO,CAAC;MAEzC;MACA,IAAI,EAAED,aAAa,YAAYE,KAAK,CAAC,IAAIF,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;QACnE,OAAO,IAAI;;MAGb;MACA,OAAOH,aAAa,CAACI,KAAK,CAAEC,IAAI,IAAK,KAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;IAAC;EAClE;EAAC;qBA7BUlB,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAqB,SAATrB,SAAS;IAAAsB,YAFR;EAAM","names":["KeycloakAuthGuard","AuthGuard","constructor","router","keycloak","isAccessAllowed","route","state","authenticated","login","redirectUri","window","location","origin","requiredRoles","data","Array","length","every","role","roles","includes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Abdo files\\TP3_MS\\ecom-web-app\\src\\app\\guards\\security.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Router,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard extends KeycloakAuthGuard {\r\n  constructor(\r\n    protected override readonly router: Router,\r\n    protected readonly keycloak: KeycloakService\r\n  ) {\r\n    super(router, keycloak);\r\n  }\r\n\r\n  public async isAccessAllowed(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ) {\r\n    // Force the user to log in if currently unauthenticated.\r\n    if (!this.authenticated) {\r\n      await this.keycloak.login({\r\n        redirectUri: window.location.origin\r\n      });\r\n    }\r\n\r\n    // Get the roles required from the route.\r\n    const requiredRoles = route.data['roles'];\r\n\r\n    // Allow the user to proceed if no additional roles are required to access the route.\r\n    if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // Allow the user to proceed if all the required roles are present.\r\n    return requiredRoles.every((role) => this.roles.includes(role));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}